use anchor_lang::prelude::*;

declare_id!("1uu1R8otFuC235hhTstPWVUwsuZ1z5cLoKYd1biVv8Y");

// Load modules
pub mod errors;
pub mod instructions;
pub mod state;
pub mod utils;

// Re-export state accounts
pub use state::config::AmmConfig;
pub use state::pool::{Pool, PoolType};
pub use state::user::UserPosition;

// Re-export all instruction accounts including hidden types generated by Anchor
pub use instructions::create_pool::*;
pub use instructions::deposit::*;
pub use instructions::initialize::*;
pub use instructions::swap::*;
pub use instructions::withdraw::*;

// Program
#[program]
pub mod equilibrium_core {
    use super::*;

    pub fn initialize(
        context: Context<Initialize>,
        default_amplification: u64,
        default_target_weights: [u64; 3],
    ) -> Result<()> {
        instructions::initialize::handler(context, default_amplification, default_target_weights)
    }

    pub fn create_seed_pool(
        context: Context<CreateSeedPool>,
        amplification: u64,
        target_weights: Vec<u64>,
        initial_amounts: Vec<u64>,
    ) -> Result<()> {
        instructions::create_pool::create_seed_pool(
            context,
            amplification,
            target_weights,
            initial_amounts,
        )
    }

    pub fn create_growth_pool(
        context: Context<CreateGrowthPool>,
        amplification: u64,
        initial_usdc_amount: u64,
        initial_partner_amount: u64,
    ) -> Result<()> {
        instructions::create_pool::create_growth_pool(
            context,
            amplification,
            initial_usdc_amount,
            initial_partner_amount,
        )
    }

    pub fn deposit(
        context: Context<Deposit>,
        amounts: Vec<u64>,
        min_lp_amount: u64,
        concentration: u64,
    ) -> Result<()> {
        instructions::deposit::handler(context, amounts, min_lp_amount, concentration)
    }

    pub fn withdraw(
        context: Context<Withdraw>,
        lp_amount: u64,
        min_amounts: Vec<u64>,
    ) -> Result<()> {
        instructions::withdraw::handler(context, lp_amount, min_amounts)
    }

    pub fn swap(context: Context<Swap>, amount_in: u64, min_amount_out: u64) -> Result<()> {
        instructions::swap::handler(context, amount_in, min_amount_out)
    }
}
